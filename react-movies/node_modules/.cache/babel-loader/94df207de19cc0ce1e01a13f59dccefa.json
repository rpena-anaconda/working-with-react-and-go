{"ast":null,"code":"var _jsxFileName = \"/Users/rpena/Sites/udemy/working-with-react-and-go/react-movies/src/components/Genre.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport Movie from './Movie';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Genre() {\n  _s();\n\n  const location = useLocation();\n  const {\n    genreName\n  } = location;\n  const {\n    id\n  } = useParams();\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    setLoading(true);\n    fetch(`http://localhost:4000/v1/genre/${id}`).then(response => {\n      if (response.status !== 200) {\n        setError(true);\n        setErrorMessage(`Invalid response code: ${response.status}`);\n        return;\n      }\n\n      return response.json();\n    }).then(json => {\n      if (json) {\n        setMovies(json.movies);\n        setError(false);\n      }\n\n      setLoading(false);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Genre: \", genreName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), movies.map(movie => /*#__PURE__*/_jsxDEV(Link, {\n      to: `/movies/${movie.id}`,\n      className: \"list-group-item list-group-item-action\",\n      children: movie.title\n    }, movie.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) // <Movie key={movie.id} movie={movie} />\n    )]\n  }, void 0, true);\n}\n\n_s(Genre, \"h7Gtnvk472GYrfyiZyY/yRbb0D0=\", false, function () {\n  return [useLocation, useParams];\n});\n\n_c = Genre;\nexport default Genre;\n\nvar _c;\n\n$RefreshReg$(_c, \"Genre\");","map":{"version":3,"sources":["/Users/rpena/Sites/udemy/working-with-react-and-go/react-movies/src/components/Genre.js"],"names":["React","useEffect","useState","Link","useParams","useLocation","Movie","Genre","location","genreName","id","movies","setMovies","loading","setLoading","error","setError","errorMessage","setErrorMessage","fetch","then","response","status","json","map","movie","title"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAgBD,QAAtB;AAEA,QAAM;AAAEE,IAAAA;AAAF,MAASN,SAAS,EAAxB;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,EAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEAK,IAAAA,KAAK,CAAE,kCAAiCT,EAAG,EAAtC,CAAL,CACKU,IADL,CACWC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AACzBN,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,QAAAA,eAAe,CAAE,0BAAyBG,QAAQ,CAACC,MAAO,EAA3C,CAAf;AACA;AACH;;AAED,aAAOD,QAAQ,CAACE,IAAT,EAAP;AACH,KATL,EAUKH,IAVL,CAUWG,IAAD,IAAU;AACZ,UAAIA,IAAJ,EAAU;AACNX,QAAAA,SAAS,CAACW,IAAI,CAACZ,MAAN,CAAT;AACAK,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACH;;AACDF,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAhBL;AAiBH,GApBQ,EAoBN,EApBM,CAAT;AAsBA,sBACI;AAAA,4BACI;AAAA,4BAAYL,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEKE,MAAM,CAACa,GAAP,CAAYC,KAAD,iBACR,QAAC,IAAD;AAAqB,MAAA,EAAE,EAAG,WAAUA,KAAK,CAACf,EAAG,EAA7C;AAAgD,MAAA,SAAS,EAAC,wCAA1D;AAAA,gBACKe,KAAK,CAACC;AADX,OAAWD,KAAK,CAACf,EAAjB;AAAA;AAAA;AAAA;AAAA,YADQ,CAIR;AAJH,KAFL;AAAA,kBADJ;AAWH;;GA3CQH,K;UACYF,W,EAGFD,S;;;KAJVG,K;AA6CT,eAAeA,KAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport Movie from './Movie'\n\nfunction Genre() {\n    const location = useLocation();\n    const { genreName } = location;\n\n    const { id } = useParams();\n    const [movies, setMovies] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        setLoading(true)\n\n        fetch(`http://localhost:4000/v1/genre/${id}`)\n            .then((response) => {\n                if (response.status !== 200) {\n                    setError(true);\n                    setErrorMessage(`Invalid response code: ${response.status}`);\n                    return;\n                }\n\n                return response.json()\n            })\n            .then((json) => {\n                if (json) {\n                    setMovies(json.movies);\n                    setError(false);\n                }\n                setLoading(false)\n            })\n    }, [])\n\n    return (\n        <>\n            <h2>Genre: {genreName}</h2>\n            {movies.map((movie) => (\n                <Link key={movie.id} to={`/movies/${movie.id}`} className='list-group-item list-group-item-action'>\n                    {movie.title}\n                </Link>\n                // <Movie key={movie.id} movie={movie} />\n            ))}\n        </>\n    );\n}\n\nexport default Genre;\n"]},"metadata":{},"sourceType":"module"}